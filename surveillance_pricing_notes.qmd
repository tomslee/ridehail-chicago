---
title: Not Upfront 
title-block-banner: true
author: 
  - name: "RideFairTO"
    url: https://ridefair.ca/
date: last-modified
description: >
  Uber just introduced "upfront pricing for drivers" in Canada. But
  "black box pricing" would be a better term.
abstract: >
  Uber says that "upfront pricing" is about transparency and peace of 
  mind, but Chicago open data shows that Uber has used "upfront pricing" 
  to take more from each transaction by increasing fares and fine-tuning prices.
appendix-style: none
bibliography: references.bib
toc: true
toc-depth: 2
toc-title: Contents
number-sections: true
number-depth: 1
callout-appearance: default
format:
  html:
    html-math-method: katex
    # css: styles.css
    anchor-sections: true
    citations-hover: true
    footnotes-hover: true
    crossrefs-hover: true
    citation-location: document
    toc-location: left
    lightbox: true
  PrettyPDF-pdf:
    colorlinks: true
    keep-tex: true
editor: visual
---

```{r}
#| label: setup
#| echo: false
#| include: false
librarian::shelf(tidyverse, janitor, RColorBrewer, RPostgres, patchwork)
update_geom_defaults("line", aes(alpha=1.0))
update_geom_defaults("point", aes(size=2, alpha=1.0))
# The password is stored in a pgpass file (~/.pgpass, or %APPDATA%\postgresql\pgpass.conf on Windows)
con <- dbConnect(RPostgres::Postgres(),
                 host="database-1.cxkc40qycf2y.us-east-2.rds.amazonaws.com",
                 port=5432,
                 dbname="postgres",
                 user="rhreader")
```

# Uber's road to operating profit

Operating profit or loss is, roughly, the everyday revenue of a company minus the everyday cost of running the company (so leaving out things like interest and investments). @fig-uber-operations is a chart of Uber's operating profit/loss, showing a steady improvement from 2021 onwards. What changes are behind this improvement?

```{r}
#| label: fig-uber-operations
#| echo: FALSE
#| fig-cap: Uber's operation

ops <- c(-1.03,-5.49, -1.11, -0.97, -1.26, -1.61,
         -1.12, -0.88, -1.52, -1.19, -0.57, -0.55,
         -0.48, -0.71, -0.50, -0.14, -0.26, 0.33,
         0.39,  0.65,  0.17,  0.80 )
quarter_end <- c("2019-04-01","2019-07-01","2019-10-01","2020-01-01",
              "2020-04-01","2020-07-01","2020-10-01","2021-01-01","2021-04-01",
              "2021-07-01","2021-10-01","2022-01-01","2022-04-01","2022-07-01",
              "2022-10-01","2023-01-01","2023-04-01","2023-07-01","2023-10-01",
              "2024-01-01","2024-04-01","2024-07-01")
tb_ops <- tibble(quarter_end=quarter_end, ops=ops) %>% mutate(quarter_end=as.Date(quarter_end) - 1)

p <- ggplot(data=tb_ops %>% filter(ops > -2), 
            mapping=aes(x=quarter_end, 
                        y=ops, 
                        colour="dummy"))

p_operations <- p +
  geom_line(data=tb_ops%>% filter(quarter_end > "2019-09-01")) +
  geom_point() +
  labs(#title="Uber profit or loss from operations",
       x="Date",
       y="Uber profit from operations ($B)",
       caption="A loss of $5.5B in Q2 2019 is omitted") +
  theme(legend.position="none") +
  scale_y_continuous(limits=c(-2, NA)) +
  scale_colour_brewer(palette = "Dark2")
p_operations
```


# Uber fares have increased

Chicago is one of the few cities to make ridehail data available. The USA accounts for about half of Uber's revenue, and as the third biggest city in the country, Chicago's open data is a reasonable place to look. All the charts here are taken from Chicago's data sets, taking the first Thursday of every other month as a sample.

[@fig-trip-fare] shows the average fare for a trip, average distance (in miles), and duration (in minutes). The fare is shown with ("Total Fare") and without ("Fare") "additional charges" such as the booking fee and tolls. Tips are not included. The trend for each is the same, so from here we can look at the fare (without additional charges).

The chart shows a relatively constant fare from 2019 to the beginning of 2021, with an average of \$11.40, and a 50% higher fare after that, with an average of \$17.50. Even though it is based purely on Chicago fares, the conclusion that Uber has increased fares overall is consistent with that seen by Len Sherman and Hubert Horan.


```{r}
#| label: fig-trip-fare
#| echo: false
#| fig-cap: "Average fares per trip, with and without \"additional charges\""
#| fig-scap: "Average fares"
pickup_community_area_list = list(0)
index = 0
for(pickup_community_area in pickup_community_area_list){
  index = index + 1
  sql <- {"select pickup_community_area, 
    model_date,
  	-- cast(trip_count as numeric) as trip_count, 
  	mean_total_fare as \"Average Total Fare ($)\",
  	mean_fare as \"Average Fare ($)\"
  	-- mean_trip_miles as \"Average Distance (miles)\",
  	-- mean_trip_minutes as \"Average Time (mins)\" 
  	--coeff_per_mile,
  	--coeff_per_minute,
  	--coeff_intercept,
  	--rse
  	from ridehail.trip_model
  	where pickup_community_area = $1
    and model_type = 'zero'"
  } 
  rs <- dbSendQuery(con,sql)
  dbBind(rs, list(pickup_community_area))
  tb_tmp <- as_tibble(dbFetch(rs, n=-1))
  dbClearResult(rs)
  if(index > 1){
    tb <- union(tb, tb_tmp)
  } else {
    tb <- tb_tmp
  }
}

#trip_count,coeff_per_mile,coeff_per_minute,coeff_intercept,rse,mean_trip_miles,mean_trip_minutes,mean_fare
                 
tb <- tb %>%
  pivot_longer(!c(pickup_community_area, 
                  model_date),
               names_to="category", values_to="measure"
               ) 

p <- ggplot(data=tb, 
            mapping=aes(x=model_date, 
                        y=measure, 
                        colour=category))

p +
  geom_line() +
  labs(x="Date", y="Fare ($/trip") +
  theme(legend.position=c(0.2, 0.8),
        legend.title=element_blank()) +
  scale_y_continuous(limits=c(0, NA)) +
  scale_colour_brewer(palette = "Dark2")
```

[@fig-trip-stats] shows that the 50% fare increase is not the result of longer trips, whether measured in distance or time. The average distance after Jan 1, 2022 is only 7% higher than before, from 5.9 to 6.3 miles, probably because of a pandemic-induced fall-off in the number of short and slow rush-hour downtown trips, and the average time has increased only by 9%. Gas prices have increased by \$1.50 per gallon in the Chicago area in that time, and gas prices can cut significantly into drivers' net earnings, but the contribution to a typical 6-mile trip would be measured in cents rather than dollars.

```{r}
#| label: fig-trip-stats
#| echo: false
#| fig-cap: "Sample statistics for trips in Chicago"
#| fig-scap: "Sample statistics"
pickup_community_area_list = list(0)
index = 0
for(pickup_community_area in pickup_community_area_list){
  index = index + 1
  sql <- {"select pickup_community_area, 
    model_date,
  	-- cast(trip_count as numeric) as trip_count, 
  	-- mean_total_fare as \"Average Total Fare ($)\",
  	mean_fare as \"Average Fare ($)\",
  	mean_trip_miles as \"Average Distance (miles)\",
  	mean_trip_minutes as \"Average Time (mins)\" 
  	--coeff_per_mile,
  	--coeff_per_minute,
  	--coeff_intercept,
  	--rse
  	from ridehail.trip_model
  	where pickup_community_area = $1
    and model_type = 'zero'"
  } 
  rs <- dbSendQuery(con,sql)
  dbBind(rs, list(pickup_community_area))
  tb_tmp <- as_tibble(dbFetch(rs, n=-1))
  dbClearResult(rs)
  if(index > 1){
    tb <- union(tb, tb_tmp)
  } else {
    tb <- tb_tmp
  }
}

#trip_count,coeff_per_mile,coeff_per_minute,coeff_intercept,rse,mean_trip_miles,mean_trip_minutes,mean_fare
                 
tb <- tb %>%
  pivot_longer(!c(pickup_community_area, 
                  model_date),
               names_to="category", values_to="measure"
               ) 

p <- ggplot(data=tb, 
            mapping=aes(x=model_date, 
                        y=measure, 
                        colour=as.factor(pickup_community_area)),
                        fill=as.factor(pickup_community_area))

p +
  facet_wrap(vars(factor(category, levels=c("Average Fare ($)",
                                            "Average Distance (miles)",
                                            "Average Time (mins)",
                                            "Average Total Fare ($)"))),
             scales = "free_y") +
  geom_line() +
  labs(# title="Chicago ridehail trends",
       x="Date",
       y=NULL,
       colour="Pickup Community Area") +
  theme(legend.position="none") +
  scale_y_continuous(limits=c(0, NA)) +
  scale_colour_brewer(palette = "Dark2")
```

# The impact of upfront fares

In its early years, Uber set its fares based on a combination of time and distance. For example, a 6 mile, 18 minute trip with rates of \$1 per mile and \$0.20 per minute would cost \$6 + \$3.60 = \$9.60. More recently, Uber has moved away from this time-and-distance model in its implementation of "upfront" fares. The price for a trip is given "upfront", but the factors that set the price are hidden, and may change. "Upfront fares" is not an all-or-nothing system: the inputs to the model and their importance may change over time as Uber refines and revises its pricing strategy.

For each recorded month, we found the best-fit time-and-distance line. The per-mile and per-minute values for each date are shown in @fig-model-fit. The best-fit values show that the average fare increase has been driven primarily by an increase in the per-minute portion of the fare. 

@fig-model-fit also shows the difference between the best-fit fare and the actual fare for each trip (Residual Standard Error). The RSE increases from a average pre-2021 value of about \$3.60 per trip to a post-January-2021 average of \$8.50 per trip. 

This "RSE" is a measure of how much Uber has moved the price away from the time-and-distance baseline. Regardless of when Uber formally introduced upfront fares (and I cannot find a date for Chicago), the RSE is a measure of how aggressively Uber has implemented its upfront fare strategy.

Note that this chart only shows *passenger* fares. Unfortunately, Chicago data does not include driver income so we cannot see the impact of "upfront pricing for drivers", which was introduced to Chicago in September 2022.

```{r}
#| label: fig-model-fit
#| echo: false
#| fig-cap: "Best-fit time-and-distance fare components, and the residual error of the fit"
#| fig-scap: "Best fit values"
pickup_community_area_list = list(0)
index = 0
for(pickup_community_area in pickup_community_area_list){
  index = index + 1
  sql <- {"select pickup_community_area, 
    model_date,
  	-- cast(trip_count as numeric) as trip_count, 
  	-- mean_trip_miles,
  	-- mean_trip_minutes, 
  	-- mean_fare as \"Average Fare ($)\",
  	coeff_per_mile as \"Best Fit Fare Per Mile ($)\",
  	coeff_per_minute as \"Best Fit Fare Per Minute ($)\",
  	-- coeff_intercept,
  	rse as \"Residual Standard Error ($)\"
  	from ridehail.trip_model
  	where pickup_community_area = $1
    and model_type = 'zero'"
  } 
  rs <- dbSendQuery(con,sql)
  dbBind(rs, list(pickup_community_area))
  tb_tmp <- as_tibble(dbFetch(rs, n=-1))
  dbClearResult(rs)
  if(index > 1){
    tb <- union(tb, tb_tmp)
  } else {
    tb <- tb_tmp
  }
}

#trip_count,coeff_per_mile,coeff_per_minute,coeff_intercept,rse,mean_trip_miles,mean_trip_minutes,mean_fare
                 
tb <- tb %>%
  pivot_longer(!c(pickup_community_area, 
                  model_date),
               names_to="category", values_to="measure"
               ) 

p <- ggplot(data=tb, 
            mapping=aes(x=model_date, 
                        y=measure, 
                        colour=as.factor(pickup_community_area)),
                        fill=as.factor(pickup_community_area))

p +
  facet_wrap(vars(category), scales="free_y") +
  geom_line() +
  #geom_smooth(method="lm", se=FALSE, fullrange=FALSE, level=0.95) +
  labs(# title="Chicago ridehail model trends",
       x="Date",
       y="Value ($)",
       colour="Pickup Community Area") +
  theme(legend.position="none") +
  scale_y_continuous(limits=c(0, NA)) +
  scale_colour_brewer(palette = "Dark2")
```

# Upfront fares drove fare increases

@fig-model-fare-variability shows that the timing of the increase in RSE matches that of average fares. Best fit lines and error ribbons have been added for 2019--2020 and 2021--2024 time periods.

Uber's implementation of upfront fares (as measured by the decoupling of fares from a time-and-distance model) coincides exactly with, and so probably produced, the increase in average fare. Although Uber never talks about upfront fares as a method of increasing the price of its service, preferring to claim "peace of mind" and "transparency", these results show that the two are strongly connected.

With the introduction into Canada of "upfront fares for drivers", accompanied by much of the same rhetoric, there is a strong reason for concern that Uber will use it to reduce driver pay. Drivers in the USA have claimed that their earnings have decreased over time, and Len Sherman' has used's analysis of data from third-party sources supports those claims. "Algorithmic pay discrimination" is not just a matter of paying some drivers more than others, it is a way to drive down Uber's overall commitment to drivers. The continued improvement of Uber's financials (see @fig-uber-operations) as upfront pay for drivers is rolled out in more markets is probably not a coincidence.

```{r}
#| label: fig-model-fare-variability
#| echo: false
#| fig-cap: "Fares and RSE variability"
#| fig-scap: "Fare and variability"
pickup_community_area_list = list(0)
index = 0
for(pickup_community_area in pickup_community_area_list){
  index = index + 1
  sql <- {"select pickup_community_area, 
    model_date,
  	-- cast(trip_count as numeric) as trip_count, 
  	-- mean_trip_miles,
  	-- mean_trip_minutes, 
  	mean_fare as \"Average Fare ($)\",
  	-- coeff_per_mile as \"Fare Per Mile ($)\",
  	-- coeff_per_minute as \"Fare Per Minute ($)\",
  	-- coeff_intercept,
  	rse as \"Residual Standard Error ($)\"
  	from ridehail.trip_model
  	where pickup_community_area = $1
    and model_type = 'zero'"
  } 
  rs <- dbSendQuery(con,sql)
  dbBind(rs, list(pickup_community_area))
  tb_tmp <- as_tibble(dbFetch(rs, n=-1))
  dbClearResult(rs)
  if(index > 1){
    tb <- union(tb, tb_tmp)
  } else {
    tb <- tb_tmp
  }
}

#trip_count,coeff_per_mile,coeff_per_minute,coeff_intercept,rse,mean_trip_miles,mean_trip_minutes,mean_fare
                 
tb <- tb %>%
  pivot_longer(!c(pickup_community_area, 
                  model_date),
               names_to="category", values_to="measure"
               ) 

p <- ggplot(data=tb, 
            mapping=aes(x=model_date, 
                        y=measure, 
                        colour=as.factor(pickup_community_area)),
                        fill=as.factor(pickup_community_area))

p <- p +
  facet_wrap(vars(category), scales="free_y", ncol = 1) +
  geom_line() +
  geom_smooth(data=subset(tb, model_date<as.Date("2021-01-01")), 
              formula = y ~x, method="lm", se=TRUE, fullrange=FALSE, 
              level=0.95, linetype=2, linewidth=0.5) +
  geom_smooth(data=subset(tb, model_date>as.Date("2021-01-01")), 
              formula = y ~x, method="lm", se=TRUE, fullrange=FALSE,
              level=0.95, linetype=2, linewidth=0.5) +
  labs(#title="Chicago ridehail model trends: variability and average fare go together",
       x="Date",
       y="Value ($)",
       colour="Pickup Community Area") +
  theme(legend.position="none") +
  scale_y_continuous(limits=c(0, NA)) +
  scale_colour_brewer(palette = "Dark2")

# (p / p_operations) + plot_layout(heights=c(2,1))
p
```

# Why variable prices matter

While "RSE" may measure the deviation from a time-and-distance model, and although it has *accompanied* an increase in fare, it is a separate measure. The fare a rider can expect to pay is, roughly, the average fare "plus or minus" the RSE. So if the RSE is independent of the average, and if riders may pay less than the average or more, does the variability of pricing, as measured by the RSE, actually matter? The answer is "yes".

In a competitive market, companies have to lower their prices to meet those of the competition. The ideal result is that prices are lowered so that supply meets demand. Some consumers would be prepared to pay more than this price (the Demand line) and so there is a large "consumer surplus" -- the area in red in @fig-supply-demand (A).

In the absence of competition, a monopolist can set its own prices. The result is shown in @fig-supply-demand (B). Monopolists may lose a few customers who are not able or prepared to pay the higher price, but gain more than enough from the higher prices the remaining consumers pay to make it worth their while. Meanwhile, the consumer surplus shrinks. Competition law exists, in part, to protect consumers from this kind of monopoly behaviour.

Uber and other platform companies are looking to go beyond what normal monopolists can do, as shown in @fig-supply-demand-2 (B). 
By fine-tuning prices for each trip, they can not only increase the average price, but they can make the most out of each transaction: set a high price for those trips where the rider would be prepared to pay more, and set a lower price to keep those who would not be prepared to pay the higher average fare---and by presenting the price as "upfront", consumers do not know where on this line they fit.

```{r}
#| label: fig-supply-demand
#| echo: FALSE
#| fig-cap: Monopolists (B) can take more of the surplus from transactions than companies in a competitive market (A).
#| 
f_supply <- function(x){
  x
}
f_demand <- function(x){
  10 - x
}
mydata <- data.frame(x=seq(0, 7, 0.5))
mydata <- data.frame(x=seq(0, 7, 0.5),
                    supply = sapply(mydata$x, FUN = f_supply),
                    demand = sapply(mydata$x, FUN = f_demand))


label_size=3
title_size=4

p_competition <-  ggplot(mydata, aes(x=x)) + xlim(0, 7)

p_competition <- p_competition + 
  annotate("text", x = 3.5, y = 10, label = "Competitive", size=title_size) +
  geom_function(fun = f_supply) +
  geom_function(fun = f_demand) + 
  labs(x="Quantity", y="Price") +
  geom_ribbon(data=subset(mydata, x<=5), 
              aes(ymin=5, ymax=demand), fill="#1b9e77", alpha=0.2,) + 
  geom_ribbon(data=subset(mydata, x<=5), 
              aes(ymin=supply, ymax=5), fill="#d95f02", alpha=0.2,) + 
  annotate("segment", x = 0, y = 5, xend = 5, yend = 5, linetype="dashed", colour="#5c5c5c") +
  annotate("segment", x = 5, y = 0, xend = 5, yend = 5, linetype="dashed", colour="#5c5c5c")  +
  annotate("text", x = 6, y = 3, label = "Demand", size=label_size) + #, label.size=0) +
  annotate("text", x = 6, y = 7, label = "Supply", size=label_size) +
  # annotate("label", x = 5, y = 5, hjust="left", label = "Competition", colour="red") +
  annotate("text", x = 0.25, y = 6, hjust="left", label = "Consumer\nsurplus", size=label_size, colour="#0a523e") +
  annotate("text", x = 0.25, y = 4, hjust="left", label = "Producer\nsurplus", size=label_size, colour="#321000") +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank())

p_monopoly <-  ggplot(mydata, aes(x=x, y = supply)) + xlim(0, 7)

p_monopoly <- p_monopoly + 
  annotate("text", x = 3.5, y = 10, label = "Monopoly", size=title_size) +
  geom_function(fun = f_supply) +
  geom_function(fun = f_demand) + 
  labs(x="Quantity", y="Price") +
  geom_ribbon(data=subset(mydata, x<=2.5), 
              aes(ymin=7.5, ymax=demand), fill="#1b9e77", alpha=0.2,) +
  geom_ribbon(data=subset(mydata, x<=2.5), 
              aes(ymin=supply, ymax=7.5), fill="#d95f02", alpha=0.2,) + 
  annotate("segment", x = 0, y = 7.5, xend = 2.5, yend = 7.5, linetype="dashed", colour="#5c5c5c") +
  annotate("segment", x = 2.5, y = 0, xend = 2.5, yend = 7.5, linetype="dashed", colour="#5c5c5c")  +
  annotate("text", x = 6, y = 3, label = "Demand", size=label_size) + #, label.size=0) +
  annotate("text", x = 6, y = 7, label = "Supply", size=label_size) +
  # annotate("label", x = 2.5, y = 7.5, hjust="left", label = "Monopoly", colour="blue") +
  annotate("text", x = 0.25, y = 8.5, hjust="left", label = "Consumer surplus", size=label_size, colour="#0a523e") +
  annotate("text", x = 0.25, y = 5, hjust="left", label = "Producer\nsurplus", size=label_size, colour="#321000") +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank())

p_competition + p_monopoly +
  # plot_layout(ncol=2) + 
  plot_annotation(tag_levels = "A")
```

```{r}
#| label: fig-supply-demand-2
#| echo: false
#| fig-cap: Monopolies who can unbundle their prices (B), like Uber, can take even more of the surplus than traditional monopolies (A).
p_uber <-  ggplot(mydata, aes(x=x, y = supply)) + xlim(0, 7)

p_uber <- p_uber + 
  annotate("text", x = 3.5, y = 9.5, label = "Unbundled\nmonopoly", size=title_size) +
  geom_function(fun = f_supply) +
  geom_function(fun = f_demand) + 
  labs(x="Quantity", y="Price") +
  geom_ribbon(data=subset(mydata, x<=5), 
              aes(ymin=supply, ymax=demand), fill="#d95f02", alpha=0.2,) + 
  annotate("segment", x = 0, y = 9.9, xend = 5, yend = 4.9, linetype="dashed", colour="#5c5c5c") +
  #annotate("segment", x = 2.5, y = 0, xend = 2.5, yend = 7.5, linetype="dashed")  +
  annotate("text", x = 6, y = 3, label = "Demand", size=label_size) +
  annotate("text", x = 6, y = 7, label = "Supply", size=label_size) +
  # annotate("label", x = 2.5, y = 7.5, hjust="left", label = "Monopoly", colour="blue") +
  #annotate("label", x = 0.25, y = 8.5, hjust="left", label = "Consumer surplus") +
  annotate("text", x = 0.25, y = 5, hjust="left", label = "Producer\nsurplus", size=label_size, colour="#321000") +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank())

p_monopoly + p_uber +
  plot_annotation(tag_levels = "A")

```

# Surveillance pricing or global adjustments?

We can't say for sure if these RSE variations are based on personal rider characteristics or on impersonal factors (time of day, state of traffic, driver supply). Maybe we don't need to? We could just raise the possibility and say that the devil is in the details that Uber is refusing to make public.

Anyway, I broke down trips into buckets of different distances (0--10 miles, 10--20, 20--30, 30--40, leaving out any over 40 miles). One possibility is that there is a time-of-day variation, but at least at first inspection, this does not seem to be the case...

Are there patterns we can pick out? The absence of patterns based on obvious global variables (time of day, distance) suggests personalization / surveillance. Short trips (which are the great majority) have more deviation (as percentage of the fare) and there is substantial variation at all times of day except for the early-morning quiet period.

```{r}
#| label: fig-rse_1
#| echo: FALSE
pickup_community_area=32
year=2024
month=6
sql <- {"select trip_id, date_part('hour', trip_start_timestamp::time) as hour, trip_miles, trip_minutes, fare, 
	(coeff_per_mile * trip_miles + coeff_per_minute * trip_minutes) as model_fare,
	round((5 + trip_miles)/ 10) * 10 as bin_max,
	((coeff_per_mile * trip_miles + coeff_per_minute * trip_minutes) - fare) as trip_deviation,
	(100.0 * ((coeff_per_mile * trip_miles + coeff_per_minute * trip_minutes) - fare)/ fare ) as trip_deviation_percent
from ridehail.trip_fares f inner join ridehail.trip_model m
on f.year = m.year and f.month = m.month 
and f.pickup_community_area = m.pickup_community_area
and m.model_type = 'zero'
where f.pickup_community_area = $1
and f.year = $2 and f.month = $3
and fare > 0"}

rs <- dbSendQuery(con,sql)
dbBind(rs, list(pickup_community_area, year, month))
tb <- as_tibble(dbFetch(rs, n=-1)) 
dbClearResult(rs)

p <- ggplot(data=tb %>% filter(bin_max < 40, abs(trip_deviation_percent)< 100) %>% mutate(bin=as.factor(bin_max)), 
            mapping=aes(x=hour, 
                        y=trip_deviation_percent, 
                        colour=bin))
p +
  facet_wrap(vars(bin_max)) +
  geom_point(alpha=0.1) +
  # geom_smooth(method="lm", se=FALSE, fullrange=FALSE, level=0.95) +
  labs(title="Chicago ridehail trends: deviations in CA 8, 2024-06",
       subtitle="If deviations come from global demand/traffic trends, there would be time-based differences.",
       x="Hour",
       y="Trip deviation from distance/time fit (% of fare)") +
  scale_y_continuous(limits=c(-100, +100)) + # , trans='log10') +
  # theme(legend.position="none") +
  # theme(legend.title=element_blank()) +
  scale_colour_brewer(palette = "Dark2")
```

@fig-model_fares_change shows the difference between the actual fare and the best "time-and-distance" prediction.

-   It shows that short trips, which are the majority, are subject to the biggest fare increases since 2019.

-   It also shows again that short trips are subject to the biggest deviation from time & distance. A positive value corresponds to the actual price being above the best "time-and-distance" model price.

```{r}
#| label: fig-model_fares_change
#| echo: FALSE

sql <- {"select model_date, bin_max, 
	mean_bin_fare,
	mean_bin_model_fare,
	(100.0 * mean_bin_fare / first_value(mean_bin_fare) over w)  as fare_change_percent,
	(100.0 * mean_bin_model_fare / first_value(mean_bin_model_fare) over w)  as model_fare_change_percent
from (
select model_date, bin_max, avg(fare) as mean_bin_fare, avg(trip_miles) as mean_bin_miles, 
	avg(60.0 * trip_miles/trip_minutes) as mean_bin_mph, cast(count(*) as numeric) as trip_count, 
	avg(coeff_per_mile * trip_miles + coeff_per_minute * trip_minutes) as mean_bin_model_fare
from
	(select model_date, trip_miles, trip_minutes, fare, coeff_per_mile, coeff_per_minute,
	round((5 + trip_miles)/ 10) * 10 as bin_max
	from ridehail.trip_fares 
	inner join ridehail.trip_model
	on ridehail.trip_fares.year = date_part('year', ridehail.trip_model.model_date)  
	and ridehail.trip_fares.month = date_part('month', ridehail.trip_model.model_date)  
	where ridehail.trip_model.pickup_community_area = 0
	and ridehail.trip_model.model_type = 'zero'
	and ridehail.trip_fares.trip_miles < 40
	and trip_minutes > 0) as T
group by bin_max, model_date
order by bin_max, model_date
) as T
window w as (partition by bin_max order by model_date);"}

rs <- dbSendQuery(con,sql)
tb <- as_tibble(dbFetch(rs, n=-1)) 
dbClearResult(rs)

tb_plot <- tb %>%
  mutate(model_diff = mean_bin_fare - mean_bin_model_fare) %>%
  select(c(model_date, bin_max, fare_change_percent, model_diff)) %>%
  pivot_longer(!c(model_date, bin_max),
               names_to="category", values_to="measure"
               ) 

p <- ggplot(data=tb_plot, 
            mapping=aes(x=model_date, 
                        y=measure, 
                        colour=as.factor(bin_max)))
p +
  facet_wrap(vars(category), scales = "free_y") +
  geom_line() +
  # geom_smooth(method="lm", se=FALSE, fullrange=FALSE, level=0.95) +
  labs(title="Chicago ridehail trends: fares vs distance",
       x="Date",
       y="Measure",
       colour="Distance (bin max)") +
  # scale_y_continuous(limits=c(0, NA)) +
  # theme(legend.position="none") +
  # theme(legend.title=element_blank()) +
  scale_colour_brewer(palette = "Dark2") 
```

# Consumer surplus and market competition

In an ideal competitive market, firms have to lower prices to keep customers. The result is that many consumers, who would be willing and able to pay higher prices if they had to, can get a product or service at a relatively low price. This price gap between what customers would be prepared to pay and the actual price, added up over all consumers, is called the consumer surplus from competition.

In a competitive market, firms cannot raise their prices because other firms would then undercut them. In a monopolistic market, firms can raise their prices without worrying about competition. From the firm's point of view, the loss of those consumers who are no longer able or willing to buy the product is more than made up for by the increased price that the remaining consumers pay. A monopoly is able to make more money, while reducing the consumer surplus.

From a firm's point of view, the ideal world is one in which they can charge each consumer as much as possible without losing their business, and capture all the consumer surplus in the market. Again, this kind of activity is only possible if a firm has the "price setting" power that comes from monopoly status, or at least from significant barriers to switching.

Most monopolies have not been able to engage in personalized pricing. Platform firms such as Uber have new opportunities in this area, because of the data they have about customer preferences, attributes, and behaviour.

An analysis of Uber data from Chicago shows that:

-   In the last five years, Uber has successfully increased consumer fares.

-   Uber has engaged in surveillance pricing. One result is a higher price (for customers) for short trips, compared to longer trips.

-   Beyond this bias to longer trips, there is still additional personalization of fares compared to a "distance and time" based "rate card" fare. This additional personalization is another source of revenue for Uber.

-   Chicago does not publish what drivers are paid for trips, and so we are not able to analyze how the introduction of surveillance wages has affected Uber's bottom line and driver income, but the parallels with passenger experience suggests that this is another form of revenue for Uber.

In short, the use of personalized pricing (fares and wages) is an important part of Uber's drive to profitability. It harms consumers and drivers, as Uber is able to take much of the "consumer surplus" from the exchange. Uber is only able to take these actions because it has limited competition in the market.

Uber's surveillance pricing raises important topics for regulators:

-   Fairness:

-   Competition: Uber's surveillance pricing is an example of monopolistic behaviour.

## Uber's statements on surveillance

In addition to other reasons why drivers may see different prices for the same trip, "In order to continuously improve the Driver app and earnings offerings, we also run tests of new features and models that may result in different fares for drivers across different groups, which are never based on protected characteristics." -- "Understanding Upfront Fares", Miriam Chaum (Uber Under the Hood blog) [@chaumUnderstandingUpfrontFares2023].

# Appendix {.appendix}

## Modeling details

Just some stuff

# References

::: {#refs}
:::
